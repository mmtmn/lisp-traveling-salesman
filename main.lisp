(defun find-shortest-path (graph start-node)
  (let ((unvisited (remove start-node (copy-list graph)))
        (shortest-path nil))
    (labels ((build-path (node path)
        (if (null unvisited)
            (progn (push node path)
                   (setq shortest-path path))
          (let ((shortest-length nil)
                (shortest-node nil)
                (remaining-nodes (copy-list unvisited)))
            (dolist (n remaining-nodes)
              (let ((length (cdr (assoc n node))))
                (if (null shortest-length)
                    (progn (setq shortest-length length)
                           (setq shortest-node n))
                  (if (< length shortest-length)
                      (progn (setq shortest-length length)
                             (setq shortest-node n))))))
            (push node path)
            (setq unvisited (remove shortest-node unvisited))
            (build-path shortest-node path)))))
    (build-path start-node nil)
    shortest-path))

;; Creating a graphical sales man problem
(defparameter *graph* '((a (b 5) (c 6))
                        (b (a 5) (d 4) (e 3))
                        (c (a 6) (d 5) (f 4))
                        (d (b 4) (c 5) (e 6) (f 5))
                        (e (b 3) (d 6) (f 5))
                        (f (c 4) (d 5) (e 5))))

;; Solving the problem using the algorithm
(find-shortest-path *graph* 'a)
;; (A B E F C D)